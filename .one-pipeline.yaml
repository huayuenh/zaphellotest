version: '1'

setup:
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash

    GH_TOKEN=$(cat "$WORKSPACE/git-token")
    OWNER=$(jq -r '.services[] | select(.toolchain_binding.name=="app-repo") | .parameters.owner_id' /toolchain/toolchain.json)
    REPO=$(jq -r '.services[] | select(.toolchain_binding.name=="app-repo") | .parameters.repo_name' /toolchain/toolchain.json)
    REPO=${REPO%.git}
    curl -u ":$GH_TOKEN" https://github.ibm.com/api/v3/repos/$OWNER/$REPO/branches/master/protection -XPUT -d '{"required_pull_request_reviews":{"dismiss_stale_reviews":true},"required_status_checks":{"strict":true,"contexts":["tekton/code-branch-protection","tekton/code-unit-tests","tekton/code-cis-check","tekton/code-vulnerability-scan","tekton/code-detect-secrets"]},"enforce_admins":null,"restrictions":null}'

    npm ci

test:
  abort_on_failure: false
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash

    cd ../"$(load_repo app-repo path)"
    npm ci
    npm test

containerize:
  dind: true
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash

    if [[ "$PIPELINE_DEBUG" == 1 ]]; then
      trap env EXIT
      env
      set -x
    fi

    source scripts/build_setup.sh
    source scripts/build.sh

deploy:
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash

    if [[ "$PIPELINE_DEBUG" == 1 ]]; then
      trap env EXIT
      env
      set -x
    fi

    source scripts/deploy_setup.sh
    source scripts/deploy.sh

dynamic-scan: 
  abort_on_failure: false
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash

    #export the APP_URL to make it available for the zap asyn run. First set in the build script
    export_env "app-url"
    # feature preivew this until evidence locker v2 usage is full feature ready 
    # can be triggered, and owasp will run for preview purposes 

    source "${ONE_PIPELINE_PATH}"/tools/trigger-task
    #trigger-task "owasp-zap" "dynamic_scan"

acceptance-test:
  abort_on_failure: false
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash

    source /root/.nvm/nvm.sh
    npm ci
    export APP_URL=$(cat ../app-url)
    npm run acceptance-test

release:
  abort_on_failure: false
  image: wcp-compliance-automation-team-docker-local.artifactory.swg-devops.com/ibm-compliance-automation:1.9.1@sha256:3f3e344a1efb160d83c48cf2ee878a39cbad058c8640c423472e0546316232fd
  script: |
    #!/usr/bin/env bash

    source scripts/release.sh

owasp-zap: 
  dind: true
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash
    if [[ "$PIPELINE_DEBUG" == 1 ]]; then
      trap env EXIT
      env
      set -x
    fi
    CURRENT_DIRECTORY=$(pwd)
    
    # GENERAL NOTE
    # The zap scan scripts assume it is working from ${WORKSPACE} (/workspace/app)
    # Paths are set based on this. For example. If the /workspace/app contains
    # a repo called 'myzap_repo' which contains the zap scripts, the path you specify
    # for the set up steps below should begin with 'myzap_repo/'. 
    # The scripts will automatically prefix these paths with ${WORKSPACE}.
    # By default when an async task starts up, it copies the content of your repo into /workspace/app/one-pipeline-config-repo
    # During the setup you must switch to ${WORKSPACE} and you can specify 'one-pipeline-config-repo' when setting the paths
    # The reason to specify the paths this way, is to allow a git clone command to run, cloning an additional repo into ${WORKSPACE}
    # The user might wish to have a common repo which holds the core zap scripts
    # And have specific scripts in the application repo

    # IMAGE REPOS
    # the zap api and zap ui scan use three images. For the moment, it is required to build and self host the images
    # zap-api-image https://github.ibm.com/owasp-tools/api-dynamic-scans/tree/onePipelinev2UBI Note the branch
    # zap-ui-image https://github.ibm.com/owasp-tools/ui-dynamic-scans
    # zap-proxy-image https://github.ibm.com/owasp-tools/zap-proxy 

    # CLONE REPO
    # Example using a common repo containing the core zap scripts
    # GIT_TOKEN="$(get_env git-token "")" where git-token is a pipeline param set in the UI
    # git clone "https://${GIT_TOKEN}@github.ibm.com/huayuenh/myzap_repo"
    # set_env "zap-core-scripts" "myzap_repo/scripts/zap_core"

    # ##SCAN SET UP FOR API AND UI##
    
    # SET THE WORKING DIRECTORY
    cd "${WORKSPACE}"

    # For deploying zap to a cluster an api-key and cluster name is required
    # Assumes apikey secret value is stored under pipeline param called "ibmcloud-api-key"
    # This can be updated in the zap-core/setup script

    # SET CLUSTER NAME
    # expects a parameter in the pipeline UI called "cluster-name"
    # can be updated in the zap-core/setup script. Search for IBMCLOUD_IKS_CLUSTER_NAME

    # SET APIKEY FOR CLUSTER DEPLOY
    # expects a parameter in the pipeline UI called "ibmcloud-api-key"
    # again this can be changed in the zap-core/setup script. See IBMCLOUD_API_KEY

    # SEE zap-core/setup for other optional params

    # SET THE CORE ZAP FILES DIRECTORY
    set_env "zap-core-scripts" "one-pipeline-config-repo/scripts/zap_core"

    # SET UP A RESULTS FILTER High, Medium, Low, Informational (Optional)
    set_env "filter-options" "Informational"

    # SET UP ZAP API SCAN
    # set the zap api image
    set_env "zap-api-image" ""

    # FLAG FOR RUNNING API SCAN AS DIND default is false
    # set_env "zap_dind" "true"

    # set the url of the app to scan
    # reading back the param that was exported in the dynamic-scan setup stage. See dynamic-scan stage
    export URL
    #app-url exported in the dynamic-scan stage
    URL="$(get_env app-url "")"
    set_env "target-application-server-url" "${URL}"

    # set the swagger defintion file(s) comma separated if required
    set_env "swagger-definition-files" "one-pipeline-config-repo/definitions/definitions1.json"

    # set an optional custom file to modify the swagger definition before it is sent to be scanned
    # Note: zap scan requires the swagger definition to be in json format and with an additional wrapper. See definitions/definitions1.json
    # The custom script option allows a script to process the raw input before the scan
    set_env "zap-api-custom-script" "one-pipeline-config-repo/scripts/zap-custom-scripts/custom-api-script"

    # start the scan
    source one-pipeline-config-repo/scripts/zap_core/run_scan

    # SET UP ZAP UI SCAN 
    # set the zap ui images
    set_env "zap-ui-image" ""
    set_env "zap-proxy-image" ""

    # set the url of the app to scan (doesn't need to be set a second time)
    # sample UI tests provided by SCC team
    URL=https://test.cloud.ibm.com/catalog
    set_env "target-application-server-url" "${URL}"

    # set the UI flag. By default it is set to false
    # this flag "zap-ui-scan" can be set in the UI parameters of the pipeline and toggled between runs to better schedule which scans are run 
    set_env "zap-ui-scan" "true"

    # set the path the directory containing the UI test scripts
    set_env "zap-ui-script-directory" "one-pipeline-config-repo/scripts/zap-ui-test/uiscripts"

    # set the path to a context file if required
    # set_env "context-file" "one-pipeline-config-repo/scripts/zap-ui-test/contextfile/custom-context.context"

    # set an optional custom file to run during the UI set up. See example
    # it might be a requirement to create a script containeing secrets for the UI tests to import
    set_env "zap-ui-custom-script" "one-pipeline-config-repo/scripts/zap-custom-scripts/custom-ui-script"

    # start the scan
    #source one-pipeline-config-repo/scripts/zap_core/run_scan

